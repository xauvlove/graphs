@startuml
'https://plantuml.com/activity-diagram-beta

start

group 根节点枚举过程
    : 根节点枚举;
    note left
        根节点枚举需要暂停所有的线程
    end note
    : 设置线程标记;
    note left
        给线程做一个标记，
        线程在特定时机去查询比较这个标记
        发现线程被标记，那么将会在安全点进行线程中断
    end note

    repeat : 线程轮询标记;
    note left
        轮询时机包括：
            new 对象，或者在 堆上分配内存时
            安全点
    end note
    backward: 没有到达安全点;
    repeat while(到达安全点)

: 中断线程;
note left
    中断线程有两种方法
        抢先式
        主动式
    一般使用主动式，
    线程自己到达安全点后进行自我中断，
    上面的流程就是主动式
end note

note right
    这里解释下抢先式：
    抢先式是：虚拟机先暂停所以线程，
    发现这些线程有一些不在安全点上，
    让这些线程继续执行直到安全点，再暂停这些线程
end note
end group

group 并发可达性分析
    repeat : 将 GC root 标记为白色，[初始状态为白色，其实白色根本无需标记];
        : 查找 GC root 引用并标记引用对象为灰色或黑色;
        note left
            灰色表示该对象还有没有被扫描到的引用对象
            黑色表示该对象是存活对象，不需回收
        end note
        : 沿着 灰色对象继续向前推进，继续标记对象为灰色或黑色;
        note left
            继续搜索这个灰色对象，
            是否还有其他对象引用着这个灰色对象
        end note
    repeat while()
   : 所有 GC root 引用链 扫描标记完成;
   : 增量更新 或 原始快照 修复并发可达性分析时的增量数据;
   note left
        并发可达性分析时，可能存在本来是需要回收的对象实现了自救
        解决办法：
        1.增加一张并发增量更新记录表
        当全部被枚举到的 GC root 可达性分析链扫描完成之后
        将这张增量更新表记录的变化对象再重新扫描一遍

        2.原始快照同样也是增加一张表
        记录了增量数据，等待全部被枚举到的 GC root 可达性分析链扫描完成之后
        重新扫描
   end note
   : 可达性分析完成;
end group

group 垃圾清除
    : 清除垃圾;
    note left
        不同的垃圾收集器有各自的标记方式
        但都会经过 GC root枚举和可达性分析阶段
    end note
end group


stop

@enduml
